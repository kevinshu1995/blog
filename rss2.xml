<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>前端路上</title>
    <link>https://kevinshu1995.github.io/blog/</link>
    
    <atom:link href="https://kevinshu1995.github.io/blog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Hi，這個部落格記錄了我的學習筆記、生活雜事 | 我是網頁設計師，曾經是個半吊子的平面設計，後來突然發覺寫網頁超好玩，目標成為真正的前端工程師 | 學得越多，懂得越少</description>
    <pubDate>Fri, 15 Apr 2022 10:38:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Hi 👋 我是許文修 - 網頁設計師，目前致力於研究前端技術</title>
      <link>https://kevinshu1995.github.io/blog/casualtalk/about-me/</link>
      <guid>https://kevinshu1995.github.io/blog/casualtalk/about-me/</guid>
      <pubDate>Sat, 16 Apr 2022 10:35:20 GMT</pubDate>
      
      <description>&lt;p&gt;這裡主要寫一些網頁前端相關的文章，主要是為了作為個人的紀錄留存用，「可能」會偶爾寫電影、音樂、遊戲類的文章，反正就是寫好玩的。有任何問題歡迎聯絡我!但我不一定會回 (?那聯絡要幹嘛&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- endcontent --><div class="figure figure--fullWidth"><img class="figure-img" src="cover_about-me-superWide.jpg" alt="Kevin Hsu"><span class="caption">Kevin Hsu</span></div><!-- content --><p><a href="https://kevinshu1995.github.io/"><img alt="Kevin Hsu | Website" style="display:inline-block;height:1em;vertical-align:middle" src="https://raw.githubusercontent.com/iconic/open-iconic/master/svg/globe.svg"> | 個人網站</a><br><a href="https://www.linkedin.com/in/%E6%96%87%E4%BF%AE-%E8%A8%B1-7b472a18a/" target="_blank" rel="external nofollow noopener noreferrer"><img alt="Kevin Hsu | LinkedIn" style="display:inline-block;height:1em;vertical-align:middle" src="https://cdn.jsdelivr.net/npm/simple-icons@v3/icons/linkedin.svg"> | Linkedin</a><br><a href="mailto:kevinshu1995@gmail.com" rel="external nofollow noopener noreferrer" target="_blank"><img alt="Kevin Hsu | Mail" style="display:inline-block;height:1em;vertical-align:middle" src="https://raw.githubusercontent.com/kevinshu1995/kevinshu1995/main/images/mail.svg"> | Email</a></p><hr><h1 id="熱愛網頁、前端，遊戲、音樂、影集也都愛-🤟"><a href="#熱愛網頁、前端，遊戲、音樂、影集也都愛-🤟" class="headerlink" title="熱愛網頁、前端，遊戲、音樂、影集也都愛 🤟"></a>熱愛網頁、前端，遊戲、音樂、影集也都愛 🤟</h1><ol><li>能獨立使用 HTML、CSS、SASS 撰寫 RWD 網頁，並了解 CSS 模組化 - BEM 概念，近期開始使用 TailwindCss，<a href="https://kevinshu1995.github.io/hex_jsDungeon/index.html">JS 地下城</a>就是用 TailwindCss 寫的。</li><li>持續學習 JS 中、AJAX 串接 API，能夠使用 Vue.js 搭配 Vue-router、Vuex 開發網頁。</li><li>了解 Git 的基本指令並搭配 Github 使用。</li><li>能使用 Adobe XD 繪製網頁設計原型，明白顏色、排版如何影響 UI、UX。</li></ol><p><code>HTML</code> / <code>SCSS</code> / <code>TailwindCss</code> / <code>Bootstrap</code> / <code>JavaScript</code> / <code>jQuery</code> / <code>Vue</code> %} / <code>Gulp</code> / <code>PhotoShop</code> / <code>Illustrator</code></p><hr><h2 id="原本學設計的，突然發現寫網頁超好玩-🎉"><a href="#原本學設計的，突然發現寫網頁超好玩-🎉" class="headerlink" title="原本學設計的，突然發現寫網頁超好玩 🎉"></a>原本學設計的，突然發現寫網頁超好玩 🎉</h2><ul><li>🔗 2020 年初才剛學會網頁時做的，很想重新製作的 <a href="https://kevinshu1995.github.io/">個人網站</a>!</li><li>🔗 2020 年剛學了 JS 寫了一個<a href="https://kevinshu1995.github.io/maskmap/">口罩地圖</a></li><li>📚 目前正在學 Vue.js，希望可以趕快學到後端的東西~</li><li>💡 學過設計，Adobe 系列都碰過，PS，AI，XD，Pr，AE，但年久失修了…😂</li></ul><p>對於程式有極大的興趣，前端切版目前能夠靈活的運用 CSS 框架開發，亦致力研究 JavaScript，包含 OOP / FP / ES6 / AJAX / Vue.js / jQuery … 等相關觀念或框架。<br>嘗試寫過<a href="https://kevinshu1995.github.io/maskmap/">口罩地圖</a>、也會寫一些<a href="https://kevinshu1995.github.io/hex_jsDungeon/index.html"> JS 小作品</a>，目前也努力記錄個人學習筆記於部落格，未來希望發展更多更有趣的 Side Project。</p><hr><h3 id="💻-我的網站們"><a href="#💻-我的網站們" class="headerlink" title="💻 我的網站們"></a>💻 我的網站們</h3><ol><li><a href="https://kevinshu1995.github.io/">個人網站</a>: 個人介紹網站。</li><li><a href="https://kevinshu1995.github.io/maskmap/">口罩地圖</a>: 因應 2020 年新冠肺炎 &amp; 剛學 JS，所以寫了這個網站當作練習。</li><li><a href="https://kevinshu1995.github.io/hex_jsDungeon/index.html">JS 地下城</a>: 一些 JS 的練習存放網站，各個作品是基於六角學院的設計稿做的。</li><li><a href="https://kevinshu1995.github.io/blog/">部落格</a>: 個人部落格，就是這裡啦，會寫一些個人的學習筆記、生活雜談、電影分享，歡迎交流。</li><li><a href="https://medium.com/@wenshiuhsu" target="_blank" rel="external nofollow noopener noreferrer">Medium</a>: 跟部落格的內容會同步發布，歡迎交流。</li><li><a href="https://www.cakeresume.com/kevinhws" target="_blank" rel="external nofollow noopener noreferrer">個人履歷</a>: 個人經歷，請不要看太詳細。</li></ol><hr><br><br>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/casualtalk/">生活亂談</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E9%97%9C%E6%96%BC/">關於</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/casualtalk/about-me/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>聰明的處理前端表單 | FormData API | handling-form-without-any-dependencies</title>
      <link>https://kevinshu1995.github.io/blog/codingnotes/handling-form-without-any-dependencies/</link>
      <guid>https://kevinshu1995.github.io/blog/codingnotes/handling-form-without-any-dependencies/</guid>
      <pubDate>Fri, 15 Apr 2022 10:35:20 GMT</pubDate>
      
      <description>&lt;p&gt;透過 FormData API 處理表單可以很輕鬆!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p>其實很久之前就很想寫這篇來記錄一下，每次都會忘記怎麼使用 FormData，因為真的太喜歡了特此紀錄 XD</p><h2 id="處理表單"><a href="#處理表單" class="headerlink" title="處理表單"></a>處理表單</h2><p>在還沒有使用 FormData API 之前，特別不知道該怎麼處理表單，最一開始我都是從 DOM 元素上面取值，再自己組合成 API 需要的格式使用，現在有了前端框架處理起來輕鬆很多，不過在我學了 FormData 之後感覺寫起來程式碼更優雅 <del>高級</del> (並不會)。</p><p>先來個原生範例</p><p class="codepen" data-height="300" data-theme-id="dark" data-default-tab="js,result" data-slug-hash="BaJGNgq" data-preview="true" data-editable="true" data-user="kevinshu" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/kevinshu/pen/BaJGNgq" target="_blank" rel="external nofollow noopener noreferrer">  Untitled</a> by kevinshu (<a href="https://codepen.io/kevinshu" target="_blank" rel="external nofollow noopener noreferrer">@kevinshu</a>)  on <a href="https://codepen.io" target="_blank" rel="external nofollow noopener noreferrer">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><blockquote><p>看起來沒什麼問題啊 XD</p></blockquote><p>的確，但是學一下新的東西不好嗎 XD</p><h2 id="FormData-API"><a href="#FormData-API" class="headerlink" title="FormData API"></a>FormData API</h2><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="external nofollow noopener noreferrer">FormData API</a> 相容性還不錯，加上 IE 已死，所以就放膽地使用吧！</p></blockquote><p>直接把剛剛的範例改寫成</p><p class="codepen" data-height="300" data-theme-id="dark" data-default-tab="js,result" data-slug-hash="MWrzaYw" data-preview="true" data-editable="true" data-user="kevinshu" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/kevinshu/pen/MWrzaYw" target="_blank" rel="external nofollow noopener noreferrer">  Untitled</a> by kevinshu (<a href="https://codepen.io/kevinshu" target="_blank" rel="external nofollow noopener noreferrer">@kevinshu</a>)  on <a href="https://codepen.io" target="_blank" rel="external nofollow noopener noreferrer">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><p>是不是看起來好像很方便!?</p><p>需要注意的事</p><ol><li>建立 FormData 的時候傳入要取值的 Form 的 DOM 元素進去。eg: <code>new FormData(&lt;FormElement&gt;)</code></li><li>Form 裡面要取值的每一個元素 (input, select, textarea…) 都必須要給 name，不然 FormData 無法取值。</li></ol><p>兩個重點，很簡單就可以來操作 FormData 了！</p><h3 id="好用的-API"><a href="#好用的-API" class="headerlink" title="好用的 API"></a>好用的 API</h3><h4 id="FormData-entries"><a href="#FormData-entries" class="headerlink" title="FormData.entries()"></a><code>FormData.entries()</code></h4><p>也就是剛剛範例裡面所使用的方法，他會回傳 iterator 物件，搭配 <code>Object.fromEntries</code> 使用就可以取得整個表單的 key/value 的物件，非常的方便好用。</p><p>不過需要注意，如果表單內有 checkbox 的話，只會回傳一個值，必須搭配後面的 <code>FormData.getAll()</code> 使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="built_in">document</span>.querySelector(<span class="string">"#form"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">Object</span>.formEntries(formData.entries());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><blockquote><p>也可以使用 <code>for..of</code> 來替代 <code>Object.formEntries()</code> 喔</p></blockquote><br><h4 id="FormData-get"><a href="#FormData-get" class="headerlink" title="FormData.get()"></a><code>FormData.get()</code></h4><p>這個就是可以根據傳入的 String 來取得 Form 元素裡面同名的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="built_in">document</span>.querySelector(<span class="string">"#form"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line"><span class="keyword">const</span> data = formData.get(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">// 回傳 name 為 account 元素當前的值</span></span><br></pre></td></tr></table></figure><br><h3 id="FormData-getAll"><a href="#FormData-getAll" class="headerlink" title="FormData.getAll()"></a><code>FormData.getAll()</code></h3><p>前面有提到，<code>FormData.getAll()</code> 是用來取得全部同名稱的值的陣列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"habits"</span> <span class="attr">value</span>=<span class="string">"swimming"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"habits"</span> <span class="attr">value</span>=<span class="string">"reading"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"habits"</span> <span class="attr">value</span>=<span class="string">"sleeping"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="built_in">document</span>.querySelector(<span class="string">"#form"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    ...Object.fromEntries(formData.entries())</span><br><span class="line">    habits: formData.getAll(<span class="string">"habits"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">// 回傳整個表單的值</span></span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>短到不行的文章，就知道我有多不用心了吧 XD<br>總而言之，學了這個 FormData API，就可以不管套件或框架，原生語法直接給他用下去就是爽啦。</p><p>當然 FormData 還有其他方法可以使用，就交給大家自己去研究了，哈哈哈。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.learnwithjason.dev/blog/get-form-values-as-json" target="_blank" rel="external nofollow noopener noreferrer">How to Convert HTML Form Field Values to a JSON Object</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="external nofollow noopener noreferrer">FormData - MDN</a></li></ul><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/codingnotes/">程式筆記</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E7%A8%8B%E5%BC%8F%E7%AD%86%E8%A8%98/">程式筆記</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/javascript/">javascript</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/codingnotes/handling-form-without-any-dependencies/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Teachable 的 Sidebar 你的時辰到了 | Tampermonkey Userscript</title>
      <link>https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/</link>
      <guid>https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/</guid>
      <pubDate>Wed, 14 Apr 2021 14:39:41 GMT</pubDate>
      
      <description>&lt;p&gt;那個 Sidebar 甚麼的給我立刻消失 !!!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p>近日又回到 Teachable 上面繼續上之前買的課程，這個平台上的 Sidebar 真的很惱人，因為我習慣把瀏覽器縮小來邊看code邊抄啊! </p><p>但是每次只要縮小瀏覽器大小，此時的 Sidebar 跟影片就同時並排…影片變超級小，平台上也沒有提供按鈕可以收合，我只是想要在一個螢幕多工作業啊!</p><p><img src="https://cf.jare.io/?u=https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/teachableDemo.jpg" alt="Teachable 原畫面展示"></p><blockquote><p>直接氣爆 XD，還是…其實只有我覺得很煩??</p></blockquote><p><img src="https://media.giphy.com/media/LrXRnC08IEzZ8LfE7w/giphy.gif" alt="喔!氣氣氣氣氣!"></p><p>可以參考一下 <a href="https://www.twitch.tv/" target="_blank" rel="external nofollow noopener noreferrer">Twitch</a> 的畫面，他提供了把側邊的畫面收合的按鈕，讓使用者也可以自行選擇，這個才是我想要的體驗，畢竟影片才是主體，旁邊的東西都給我閃邊去。</p><p><img src="https://cf.jare.io/?u=https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/twitchDemo.jpg" alt="Twitch 畫面展示"></p><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><p>剛好這幾天看到 <a href="https://www.facebook.com/will.fans" target="_blank" rel="external nofollow noopener noreferrer">保哥</a> 的粉專貼出了關於 Tampermonkey 的 <a href="https://www.facebook.com/will.fans/posts/4492143630814746" target="_blank" rel="external nofollow noopener noreferrer">貼文</a>，用來協助翻譯 Microsoft Doc 的小工具，於是我查了一下發現，好像可以拿來使用在 Teachable 上面。</p><p>Tampermonkey Userscript，是要用 Javascript 下去寫的，其實應該是可以理解成把腳本丟到開發人員工具的 console 裡面執行，有在寫前端的朋友應該都沒有問題。<br>官方的文件也有提供一些額外的 API，可以拿來做有趣的事，但我沒研讀，可以直接過去看 XD。</p><p><a href="https://www.tampermonkey.net/" target="_blank" rel="external nofollow noopener noreferrer">文件傳送門 Tampermonkey documentation</a></p><p>不過這東西出很久了，我太菜了今天才知道，哈哈。</p><blockquote><p>TaDA !!!</p></blockquote><p><img src="https://cf.jare.io/?u=https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/teachableDemo_2.jpg" alt="Teachable 新增按紐展示"></p><p>安裝好套件並打開設定的 domain 下的課程影片後，Tampermonkey 會開始跑腳本，這個腳本會在 Teachable 右上角的 Navigation 最右側新增一個按鈕，只要按下按鈕或是快捷鍵 <code>Ctrl-shift-Z</code> 就可以把 Sidebar 隱藏起來，再按一次按鈕或快捷鍵就可以復原，是不是超棒的 XDD</p><p><em>對了，我完全沒有在管相容性甚麼的，反正在我的chrome上面看起來沒問題，那就是沒問題XDD</em></p><h2 id="直接使用在-Teachable-吧"><a href="#直接使用在-Teachable-吧" class="headerlink" title="直接使用在 Teachable 吧!"></a>直接使用在 Teachable 吧!</h2><ol><li><p>首先先安裝 <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="external nofollow noopener noreferrer"> Tampermonkey Chrome 擴充插建 </a></p></li><li><p>點 <a href="https://github.com/kevinshu1995/SideBarToggleButtonOnTeachable/raw/main/SideBarToggleButtonOnTeachable.user.js" target="_blank" rel="external nofollow noopener noreferrer">腳本連結</a> 來安裝腳本</p></li><li><p>直接享受沒有 Sidebar 干擾的課程吧~</p></li></ol><p><em>PS. 我發現有個寬度畫面會跑版，有空再來調吧~</em></p><h3 id="調整腳本啟用的網站"><a href="#調整腳本啟用的網站" class="headerlink" title="調整腳本啟用的網站"></a>調整腳本啟用的網站</h3><ol><li>目前只有在 courses.hexschool.com 上面才會跑這個腳本，如果有使用 Teachable 其他的課程，要調整 domain，可以打開 Tampermonkey 的主控台之後，會看到目前安裝的腳本，按下要調整的腳本最右側的編輯按鈕(如下圖)</li></ol><p><img src="https://cf.jare.io/?u=https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/step_1.jpg" alt="調整腳本 domain 步驟一"></p><ol start="2"><li>再按下設定，接著新增 domain 就可以啦! (看是要 include 或是 match )</li></ol><p><img src="https://cf.jare.io/?u=https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/step_2.jpg" alt="調整腳本 domain 步驟一"></p><p>附上程式碼</p><script src="//gist.github.com/9691a0206bc9222b73334b4f3c17b759.js?file=SideBarToggleButtonOnTeachable.user.js"></script><h3 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h3><p>如果你也想寫自己的腳本，發布的時候記得要把檔案名稱取名為 <code>{你想取的名稱}.user.js</code>，這樣發佈到 gist (或其他地方)，當打開 Raw 檔時，插件會自己判斷並打開安裝畫面，這樣子別人使用會比較簡單~</p><p>當然網路上有蠻多人有寫腳本，要多注意安全性的問題，安裝前要看一下 source code ~ 確保安全</p><blockquote><p>參考資源<br><a href="https://blog.darkthread.net/blog/greasemonkey-load-jquery" target="_blank" rel="external nofollow noopener noreferrer">Tampermonkey 載入 jQuery 的簡便方法</a><br><a href="https://www.tampermonkey.net/" target="_blank" rel="external nofollow noopener noreferrer">Tampermonkey</a><br><a href="https://www.tampermonkey.net/documentation.php" target="_blank" rel="external nofollow noopener noreferrer">Tampermonkey documentation</a><br><a href="https://ithelp.ithome.com.tw/articles/10211943" target="_blank" rel="external nofollow noopener noreferrer">IT鐵人賽小工具 : Ctrl + V 自動上傳圖片功能</a><br><a href="https://github.com/doggy8088/MSDocsLanguageToggleSwitcher" target="_blank" rel="external nofollow noopener noreferrer">保哥的 MSDocsLanguageToggleSwitcher</a></p></blockquote><h2 id="最後附上連結，如下"><a href="#最後附上連結，如下" class="headerlink" title="最後附上連結，如下"></a>最後附上連結，如下</h2><ul><li>腳本連結<ul><li><a href="https://github.com/kevinshu1995/SideBarToggleButtonOnTeachable" target="_blank" rel="external nofollow noopener noreferrer">Github Repository</a></li></ul></li><li>個人連結<ul><li><a href="https://github.com/kevinshu1995" target="_blank" rel="external nofollow noopener noreferrer">Github @kevinHWS</a></li><li><a href="https://kevinshu1995.github.io/hex_jsDungeon/">JS 地下城網站首頁</a><ul><li>歡迎來看看JS作品</li></ul></li></ul></li></ul><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/codingnotes/">程式筆記</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E7%A8%8B%E5%BC%8F%E7%AD%86%E8%A8%98/">程式筆記</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/Tampermonkey/">Tampermonkey</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/codingnotes/Tampermonkey-SideBarToggleButtonOnTeachable/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我該早點學的前端技術|不學無術也該有個限度</title>
      <link>https://kevinshu1995.github.io/blog/learningexp/look-IAmSuck/</link>
      <guid>https://kevinshu1995.github.io/blog/learningexp/look-IAmSuck/</guid>
      <pubDate>Tue, 30 Mar 2021 14:44:34 GMT</pubDate>
      
      <description>&lt;p&gt;我這個爛如泥的薪水小偷，也該認真一點吧!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><blockquote><p>你說你早就會了!? 啊我就爛啊</p></blockquote><p>這篇文章主要會根據我的背景以及我的工作環境，討論那些我認為自己應該早點學習的前端技術，肯定不是每個人都適合，加上寫這篇文章的時候我只是個菜雞，如果你也是<strong>設計轉前端</strong>或是不確定<strong>是否要轉職前端</strong>的新手的話，也許可以當作一個參考，繼續看下去。</p><h2 id="工業設計-x-平面設計-gt-網頁前端"><a href="#工業設計-x-平面設計-gt-網頁前端" class="headerlink" title="工業設計 x 平面設計 =&gt; 網頁前端(?"></a>工業設計 x 平面設計 =&gt; 網頁前端(?</h2><p>目前是網頁設計師，工作剛滿一年也是在網頁領域的第一份工作，大約接觸網頁一年半左右。最初是去”知名”的線下實體課程上網頁課程，內容包含HTML、CSS、jQuery，運氣不錯遇到很會教的老師打了不錯的基礎，後來覺得學得還是不夠，所以毅然決然買了線上課程學 JavaScript，從實體課程到後面的線上課程，整個學習的時間大概是半年多一點之後，因為是沒有工作的狀態，所以趕緊弄了一個個人網站後就直接開始找工作，也從中稍微了解該補足甚麼技術，反正最後很幸運有順利找到工作XD。</p><p>原本是學工業設計，對於設計算是有粗淺的見解，上一份工作是平面設計，當時的工作除了平面外混了一些網路行銷跟其他沒什麼關連的東西 (例如策展 XD)，設計轉職走前端我覺得向性蠻合的，畢竟畫面和使用者體驗都是前端的重點之一，能夠更加理解設計師想要甚麼，對於走前端真的會有蠻大的幫助。</p><p>至今前端三兄弟都算是有基本的認識，工作上有遇到任何問題原則上都可以自己找到解決方式。</p><p>接下來，來回顧一下這一年學習的技術順便檢討有哪些需要再精進的部分。</p><h2 id="怎麼是網頁設計"><a href="#怎麼是網頁設計" class="headerlink" title="怎麼是網頁設計?"></a>怎麼是網頁設計?</h2><p>我目前的工作是網頁設計。<br>相信大家能理解雖然叫做「網頁設計」，每間公司實際的工作內容還是會有差別，有的有設計沒切版，有的有切版加動畫沒設計。</p><p>而我這份工作是以切版為主(小聲說:工作量不多)，JS 的部分幾乎可以說是沒有，通通都靠後端寫，但是當時考量到個人能力需要磨練加上JS基礎很薄，所以就理所當然地進來練功了。</p><p><em>這邊有一點必須要先提，由於蔽司並不是資訊或軟體業，團隊對於前端的技術要求不高，(所以我也沒有甚麼特別的開發流程可以分享XD)，因為可以有更大的空間做中學，加上我不想有過長的空窗期，這是當時我選擇進來的原因。<br>所以如果你覺得有點擔心 JS 的能力不足，又想要早點工作的話，也可以跟我一樣選擇類似的團隊，進去好好的把該學的都學起來，順便磨練一下切版速度，反正不管怎麼做都還是要自我鞭策。</em></p><p>接下來簡單介紹一下我這份「網頁設計」的工作實際上做了哪些事情。</p><ul><li>活動網頁切版</li><li>官網與各種相關網站維護</li><li>內部系統維護與設計</li><li>跟網頁無關的雜事</li></ul><p>原則上工作內容是以上幾種在跑而已，雖說是網頁設計，大概第三個月的時候，因為有在學 JS，所以直接被後端拉去一起開發內部系統，前端是使用 Vue，我除了負責畫面設計還有少部分接後端的資料處理，所以也算是被強迫推去做前端的東西 (但我個人是蠻開心的XD)，還好有強大的後端支援，後來還有接著一起做一個規模較大的內部新系統開發，一樣是使用Vue開發，當時甚麼都不懂各種崩潰 XDD。</p><h3 id="目前曾經用過的網頁相關技術"><a href="#目前曾經用過的網頁相關技術" class="headerlink" title="目前曾經用過的網頁相關技術"></a>目前曾經用過的網頁相關技術</h3><ul><li>後端 (其實我現在還是不懂，我只是知道前端會用到的東西大略該怎麼尋找答案)<ul><li>Laravel</li></ul></li><li>前端JS框架<ul><li>Vue 2 </li><li>jQuery ( 我是函式庫 ˋˊ)</li><li>Lodash ( 我也是函式庫 ˋˊ)</li></ul></li><li>CSS框架<ul><li>Bootstrap 4 </li><li>TailwindCss 2 ( 大推 )</li></ul></li><li>自動化工具<ul><li>Laravel mix</li><li>Gulp</li></ul></li><li>其他 (我覺得各自分出類別有點麻煩XD )<ul><li>Electron</li><li>Pug</li><li>SCSS</li><li>前端三兄弟 (HTML, CSS, JS)</li><li>Git、Git flow</li><li>webpack</li></ul></li></ul><p>可以看的出來實際接觸到的技術算是前端了，但這份工作正式上工前，上面所提到的除了前端三兄弟和SCSS之外，我通通都不會XD，所以這一年來在工作中學了不少新東西，<strong>但是</strong>，我認為知識量還是遠遠不足，尤其是前後端合作的部分更是有很大的進步空間QQ。</p><h2 id="那些我應該早點開始學習的技術-啊我就廢"><a href="#那些我應該早點開始學習的技術-啊我就廢" class="headerlink" title="那些我應該早點開始學習的技術 (啊我就廢"></a>那些我應該早點開始學習的技術 (啊我就廢</h2><blockquote><p>這邊不會提到跟設計相關的內容，我相信你的設計能力肯定比我還強。</p></blockquote><h3 id="資料夾結構、自動化工具、打包工具、套件管理-Webpack、Gulp、parcel、npm、yarn…"><a href="#資料夾結構、自動化工具、打包工具、套件管理-Webpack、Gulp、parcel、npm、yarn…" class="headerlink" title="資料夾結構、自動化工具、打包工具、套件管理 Webpack、Gulp、parcel、npm、yarn…"></a>資料夾結構、自動化工具、打包工具、套件管理 Webpack、Gulp、parcel、npm、yarn…</h3><p>好像一次包了太多東西在這邊，但我覺得這些東西感覺放一起就好了XD，自動化工具、打包工具、套件管理，這些工具不僅僅只是提升開發效率，還有減少重複執行的動作，他能帶來的效益實在太大了，能夠理解打包工具及套件管理的生態蠻重要的，可以從哪邊修改輸入或輸出的位置，理解資料夾的結構，知道開發資料夾在哪，怎麼調整檔案的流向非常重要。</p><p>我剛開始是直接用後端建好的 Laravel 專案，完全不知道怎麼新增套件，在 SCSS 裡連結圖片位置要怎麼打，根本搞不懂為甚麼打個 <code>npm run hot</code> 是在執行甚麼。<br>基本上自動化、打包工具的概念都差不多，稍微了解之後，即使用了另一套也可以很快就上手。所以我認為至少要稍微看得懂 webpack 的進入檔在寫甚麼，從哪邊打包並存到哪裡，其他的東西慢慢的就會越來越懂，還有 package.json 也要理解在寫甚麼，npm、yarn的生態也要稍微瞭解。<br>至少我是這樣慢慢理解的QQ。</p><p>這個東西理解了之後，在使用框架時才不會看不懂，也能玩更多有趣的設定。<br>如果真的完全看不懂 webpack 在寫甚麼的話可能要先理解 npm，可以看懂 package.json 是你的第一步。</p><blockquote><p>附上資料多到一直看不下去的 webpack 官網 <a href="https://webpack.js.org/" target="_blank" rel="external nofollow noopener noreferrer">https://webpack.js.org/</a><br><a href="https://gulpjs.com/" target="_blank" rel="external nofollow noopener noreferrer">Gulp https://gulpjs.com/</a><br><a href="https://parceljs.org/" target="_blank" rel="external nofollow noopener noreferrer">Parcel https://parceljs.org/</a><br><a href="https://www.npmjs.com/" target="_blank" rel="external nofollow noopener noreferrer">npm https://www.npmjs.com/</a></p></blockquote><h3 id="Git、Git-flow"><a href="#Git、Git-flow" class="headerlink" title="Git、Git flow"></a>Git、Git flow</h3><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>在我開始工作前其實有學過 Git，但是從沒有跟人有團隊合作的經驗，只會<code>add, commit, push, pull</code>，實際使用時超卡，超怕會搞壞的，真正的在工作上使用時才會發現不知道怎麼處理檔案衝突，<code>merge</code> <code>rebase</code>的差別，所以當時碰壁的時候認真的去玩了一下 <a href="https://learngitbranching.js.org/?locale=zh_TW" target="_blank" rel="external nofollow noopener noreferrer">Learn Git Branching</a>，在有一點團隊實際使用經驗之後重新玩一次，有時候會突然理解”為甚麼會用這個語法”或是”原來要用這個語法”。</p><blockquote><p>超級推薦學習 Git 的好幫手 <a href="https://learngitbranching.js.org/?locale=zh_TW" target="_blank" rel="external nofollow noopener noreferrer">Learn Git Branching</a></p></blockquote><h4 id="Git-flow"><a href="#Git-flow" class="headerlink" title="Git flow"></a>Git flow</h4><p>Git flow 應該可以說是各個團隊都會有一點不同，但功用就是讓團隊可以更有規範的管理 Git，更容易從commit紀錄看出每個人做了哪些事情，所以建議至少要稍微了解是怎麼做的，實際遇到的時候再去搜尋會比較有體會。</p><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>沒錯，英文其實是我覺得學習前端最重要的工具，畢竟英文的資源非常多，Stackflow 上面有超多熱心的人回覆問題，甚至可以直接上 Github 去看別人發的 issue，我常常在那邊找到問題的解答，看不懂英文至少可以用翻譯軟體撐一下，習慣看英文才更有機會找到問題的答案，更何況大多的文件其實都寫得好好的。</p><blockquote><p>順便推薦不錯的翻譯軟體插件 <a href="https://chrome.google.com/webstore/detail/rememberry-translate-and/dipiagiiohfljcicegpgffpbnjmgjcnf" target="_blank" rel="external nofollow noopener noreferrer">Rememberry</a></p></blockquote><hr><p>最後是，我在這一年加入了不少前端社群，進而體認到社群的強大，能夠有一個社群來陪我一起成長，是我在學習前端很大的助力，我通常不會用來問”xxx 為甚麼跑不出來”(反正最後會發現只是打錯字，還是不要拿出來耍白癡XD )。對我來說社群的用途是拿來看看別人都問甚麼問題、在關注甚麼技術，更新資訊的速度才能更快，也不會一直躲在自己的舒適圈裡，有時候看到大神的解說還可以去朝聖一下，順便更新一下待學習的清單，只是打開來看個訊息也能收益良多。</p><p>社群上會聊到的不只是怎麼寫程式、該怎麼提升效率或可讀性、基於甚麼樣子的情況下用哪種語法寫更好的問題，還有很重要的思維與前端生態等，偶爾打開來看看或直接上班聊起來(?)，並且去搜尋相關資料並吸收，才不會閉門造車，都寫前端了怎麼可以不擁抱網路呢!</p><p>以上是菜雞如我的分享，如果你有覺得更應該早點學習的東西，請跟我分享!</p><hr><h2 id="最後推一下不錯的資源"><a href="#最後推一下不錯的資源" class="headerlink" title="最後推一下不錯的資源"></a>最後推一下不錯的資源</h2><p><a href="https://www.hexschool.com/" target="_blank" rel="external nofollow noopener noreferrer">六角學院</a> - 前端入門的超讚學習資源，可以問爆問題的超熱心課輔系統，不過能自己找到解法才是正確的心態!<br><a href="https://developer.mozilla.org/zh-TW/" target="_blank" rel="external nofollow noopener noreferrer">MDN</a> - 最讚的前端教科書，記得要看英文版比較正確!<br><a href="https://www.edx.org/course/introduction-computer-science-harvardx-cs50x" target="_blank" rel="external nofollow noopener noreferrer">CS50</a> - 哈佛計算機概論課程，超推薦轉職的朋友，內容有趣、社群討論活躍，來場超讚的通識課吧!</p><p>網路上的資源很多，有個領你進門的課程真的不錯，當然最重要的還是要動手實作、自己發想題目，學得更多，加油!</p><h2 id="最後附上我的個人連結，如下"><a href="#最後附上我的個人連結，如下" class="headerlink" title="最後附上我的個人連結，如下"></a>最後附上我的個人連結，如下</h2><ul><li><a href="https://github.com/kevinshu1995" target="_blank" rel="external nofollow noopener noreferrer">Github @kevinHWS</a></li><li><a href="https://kevinshu1995.github.io/hex_jsDungeon/">JS 地下城網站首頁</a><ul><li>歡迎來看看JS作品</li></ul></li></ul><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/learningexp/">學習經歷</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E5%85%AD%E8%A7%92/">六角</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/">前端學習</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/learningexp/look-IAmSuck/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>幹嘛不自己上網查就好的 JavaScript 世界時鐘 | JS地下城 - 004</title>
      <link>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-004/</link>
      <guid>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-004/</guid>
      <pubDate>Tue, 09 Mar 2021 14:21:49 GMT</pubDate>
      
      <description>&lt;p&gt;這一關使用的 Date 一直到現在還是覺得這是個有點麻煩的語法，但我還是想要擁抱處理時間的套件(奔&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><blockquote><ul><li><p><font color="#aaa">BOSS 弱點</font> &gt; <font color="#aaa">【特定技術】僅能使用原生 JS 開始，不能使用套件</font></p></li><li><p><font color="#aaa">【特定技術】特別注意必須用 JS 處理各國時區</font></p></li><li><p><font color="#aaa">【書寫能力】請寫一篇 BLOG 來介紹你的挑戰過程，並介紹 JavaScript 如何提供 GMT、UTC 時區語法，以及何謂 TimeStamp。</font></p></li><li><p><font color="#aaa">UI 設計稿</font></p><img src="/blog/JSDungeons/JS-Dungeon-004/jsDungeon_cover.png" class title="UI設計稿" alt="UI設計稿"></li></ul></blockquote><a id="more"></a><br><br><h2 id="絲路-思路"><a href="#絲路-思路" class="headerlink" title="絲路 思路"></a><del>絲路</del> 思路</h2><p>一直以來都覺得 Date 是很複雜的東西，就懶得研究，實際研究之後的確有比較多的認識，不過我還是會盡量用套件處理時間的(握拳。</p><p>接下來就直接說明撰寫時的思路吧。</p><br><br><h3 id="我的思考步驟"><a href="#我的思考步驟" class="headerlink" title="我的思考步驟"></a>我的思考步驟</h3><ol><li>採取的方式是，HTML 畫面上的地點文字是靜態的，其他的時間全部藉由 JS 動態帶入。</li><li>抓取要帶入時間&amp;日期&amp;地區文字的元素之後，這時的他們是 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/NodeList" target="_blank" rel="external nofollow noopener noreferrer">nodelist</a>，可以使用部分的陣列方法，此時全部取得的 nodelist 裡相同的 index 對應的都是相同的地區。</li><li>由於 nodelist 的 index 是相對應的，就可以按照順序以抓取的地區透過 Date().toLocaleString() 的 timezone 選項逐一帶入 textContent 。</li><li>最後一步是使用 window.setInterval() 每隔一秒取得一次時間(反正也只有顯示分鐘數，就不用太精確吧)</li></ol><p>備註:</p><ul><li>timezone 被我單獨拉出來，因為這樣子方便維護(雖然我不會再打開這個檔案)</li><li>window.onload 這一步非常重要 (當瀏覽器讀取完成，才去執行抓取時間的函式)</li></ul><br><br><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> location = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.location'</span>)</span><br><span class="line">    <span class="keyword">let</span> dateText = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.date'</span>)</span><br><span class="line">    <span class="keyword">let</span> timeText = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.time'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timezone = &#123;</span><br><span class="line">        <span class="string">'NEW YORK'</span>: <span class="string">'America/New_York'</span>,</span><br><span class="line">        <span class="string">'LONDON'</span>: <span class="string">'Europe/London'</span>,</span><br><span class="line">        <span class="string">'BANGKOK'</span>: <span class="string">'Asia/Bangkok'</span>,</span><br><span class="line">        <span class="string">'TAIWAN'</span>: <span class="string">'Asia/Taipei'</span>,</span><br><span class="line">        <span class="string">'SYDNEY'</span>: <span class="string">'Australia/Sydney'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location.forEach( <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        timeText[index].textContent = currentTime(timezone[item.textContent]).time</span><br><span class="line">        dateText[index].textContent = </span><br><span class="line"><span class="string">`<span class="subst">$&#123;currentTime(timezone[item.textContent]).date&#125;</span> <span class="subst">$&#123;currentTime(timezone[item.textContent]).year&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currentTime</span>(<span class="params">timeZone</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> locale = <span class="string">'en-US'</span></span><br><span class="line">    <span class="keyword">let</span> options_YYYY = &#123;</span><br><span class="line">        timeZone,</span><br><span class="line">        year : <span class="string">'numeric'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> options_HHMM = &#123;</span><br><span class="line">        timeZone,</span><br><span class="line">        hour12 : <span class="literal">false</span>,</span><br><span class="line">        hour: <span class="string">'numeric'</span>,</span><br><span class="line">        minute: <span class="string">'2-digit'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> options_MMDD = &#123;</span><br><span class="line">        timeZone,</span><br><span class="line">        month : <span class="string">'short'</span>,</span><br><span class="line">        day : <span class="string">'numeric'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        year: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(locale, options_YYYY),</span><br><span class="line">        date: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(locale, options_MMDD),</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(locale, options_HHMM),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = getTime()</span><br><span class="line"><span class="built_in">window</span>.setInterval(<span class="string">'getTime();'</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="GMT、UTC"><a href="#GMT、UTC" class="headerlink" title="GMT、UTC"></a>GMT、UTC</h2><p>原則上 GMT (Greenwich Mean Time) = UTC (International Atomic Time)，實際上不然。</p><blockquote><p>GMT 是根據一天的時間(或是說地球自轉一圈的時間)計算的，但因目前自轉速度是有減速的跡象，所以 GMT 的一秒會越來越久，而 UTC 是根據銫原子固定震盪次數的時間計算，UTC 基本上是更穩定的。<br> 參考來源 : <a href="https://pansci.asia/archives/84978" target="_blank" rel="external nofollow noopener noreferrer">https://pansci.asia/archives/84978</a></p></blockquote><br><br><h3 id="JavaScript-上的-UTC"><a href="#JavaScript-上的-UTC" class="headerlink" title="JavaScript 上的 UTC"></a>JavaScript 上的 UTC</h3><blockquote><p>建立一個  JavaScript Date 物件來指向某一個時間點。Date 物件是基於世界標準時間（UTC） 1970 年 1 月 1 日開始的毫秒數值來儲存時間。<br>參考來源 : <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p></blockquote><br><br><h2 id="JavaScript-Date-物件實體"><a href="#JavaScript-Date-物件實體" class="headerlink" title="JavaScript Date 物件實體"></a>JavaScript Date 物件實體</h2><p>直接使用物件實體的方法來建立 Date 物件，不過字串解析時間時，充滿了各種坑，根據<a href="https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details" target="_blank" rel="external nofollow noopener noreferrer">這邊</a>的結論(直接看結論是怎樣?)，為了避免被各瀏覽器之間的支援度雷到，使用字串解析時間時要極度小心。</p><blockquote><p>如果你要我給建議，我可以說相容性最高的應該就是 Sat, 24 Sep 2016 20:42:16 GMT 這種日期時間格式，但請注意這種格式的缺點是【如果你沒有加上 GMT 時區，瀏覽器預設就會將這種格式解析為使用者電腦的本地時間】，如果沒注意到時區部分，對於全球性或跨國瀏覽的使用者來說可能會出現錯誤的時間差。否則請一律使用 ISO-8601 標準日期時間格式 ( 2016-09T02:34:33.346Z )，這種格式的優點就是【瀏覽器只會將這種格式解析為 GMT/UTC 標準時區的時間】，這樣反而可以強迫你用具有時區的思維來開發程式，出現時差錯誤的問題也會減少。</p></blockquote><p>直接過去參考一下吧!!! <a href="https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details" target="_blank" rel="external nofollow noopener noreferrer">https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details</a></p><p>坑~</p><blockquote><p>Date物件複雜的地方不只是它的進位並非十進位而已，年月日的進位還涉及閏年、星期幾的問題，以及全球各種不同語言、全球時區使用的本地化格式的問題等等各種問題。</p></blockquote><br><br><h3 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h3><p>就是從1970年01月01日0分0秒起到現在的總<strong>毫</strong>秒數，注意，是毫秒數，通常取得之後會再乘以1000，反正也不需要這麼精確 ?<br>就我所知 timestamp 會存起來做為判斷時間先後的依據，後取得的大於先取得的值，例如判斷。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'1970-01-01'</span>).getTime(); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-01-01'</span>).getTime(); <span class="comment">// 1577836800000</span></span><br></pre></td></tr></table></figure><br><br><h3 id="時區"><a href="#時區" class="headerlink" title="時區"></a>時區</h3><p>實際使用時，時區是我最搞不懂的，因為 JS 會直接把取得的時間轉換為本地時間，所以不管怎麼處理最後得到的都會是瀏覽器的本地時間 QQ</p><p>JS 的 Date().toLocaleString() 有提供 timezone 的 option，但是有一些支援度的問題 (<a href="https://caniuse.com/?search=toLocaleTimeString%20timezone" target="_blank" rel="external nofollow noopener noreferrer">caniuse</a>)，IE 還有其他部分瀏覽器不支援。但我就是要用XD</p><p>之前有看到一篇文章有寫到，目前有在規劃日期的相關統整之類的，<a href="https://tc39.es/proposal-temporal/docs/index.html" target="_blank" rel="external nofollow noopener noreferrer">看這邊</a>，但是目前普遍都會建議日期的處理使用工具函示庫比較安全，不然會容易有 bug ，最出名的 <a href="https://momentjs.com/" target="_blank" rel="external nofollow noopener noreferrer">Moment.js</a> ，不過現在moment.js 也已經停止更新了(<a href="https://dockyard.com/blog/2020/02/14/you-probably-don-t-need-moment-js-anymore" target="_blank" rel="external nofollow noopener noreferrer">you probably don’t need moment js anymore</a>)，</p><p>總之先這樣吧XDD ，菜雞不要說太多，會越說越錯。</p><blockquote><p>參考<br><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/644589/" target="_blank" rel="external nofollow noopener noreferrer">https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/644589/</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date</a><br><a href="https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details" target="_blank" rel="external nofollow noopener noreferrer">https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details</a></p></blockquote><h2 id="最後附上連結，如下"><a href="#最後附上連結，如下" class="headerlink" title="最後附上連結，如下"></a>最後附上連結，如下</h2><ul><li>世界時鐘<ul><li><a href="https://github.com/kevinshu1995/hex_jsDungeon/blob/master/app/assets/js/js004.js" target="_blank" rel="external nofollow noopener noreferrer">Github Source code</a></li><li><a href="https://kevinshu1995.github.io/hex_jsDungeon/jsDun-004.html">Github Page</a></li></ul></li></ul><ul><li>個人連結<ul><li><a href="https://github.com/kevinshu1995" target="_blank" rel="external nofollow noopener noreferrer">Github @kevinHWS</a></li><li><a href="https://kevinshu1995.github.io/hex_jsDungeon/">JS 地下城網站首頁</a><ul><li>歡迎來看看其他的JS作品</li></ul></li></ul></li></ul><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/JSDungeons/">JS地下城</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/HTML/">HTML</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/CSS/">CSS</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JS%E5%9C%B0%E4%B8%8B%E5%9F%8E/">JS地下城</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-004/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>不負責任的 JavaScript 計算機 | JS地下城 - 003</title>
      <link>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-003/</link>
      <guid>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-003/</guid>
      <pubDate>Mon, 22 Feb 2021 06:26:16 GMT</pubDate>
      
      <description>&lt;p&gt;拖延症發作之下好不容易寫成文章的一關，來來回回 JS 的部分也改了幾次，整個時程也有好幾個月。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><blockquote><ul><li><p><font color="#aaa">BOSS 弱點</font> &gt; <font color="#aaa">【特定技術】數字位數過多時，不能因此而破版，計算機功能皆須齊全</font></p></li><li><p><font color="#aaa">【自我學習】請在此關卡中「自學一個你原本不太會的技巧」，投稿時分享你透過哪些資源學習，並寫範例程式碼講解該技巧，以及你如何應用在此關卡上。</font></p></li><li><p><font color="#aaa">UI 設計稿</font></p><img src="/blog/JSDungeons/JS-Dungeon-003/jsDungeon_cover.png" class title="UI設計稿" alt="UI設計稿"></li></ul></blockquote><a id="more"></a><br><br><h2 id="前言-廢話"><a href="#前言-廢話" class="headerlink" title="前言 廢話"></a>前言 <del>廢話</del></h2><p>其實早就寫好了，只是覺得寫的不好加上拖延症發作，不過終於還是寫了啦 XDD</p><p>計算機我覺得不好寫，有好多邏輯判斷要寫 QQ，但是寫起來很有趣。這邊我算是參照 windows 內建計算機的邏輯寫的，目前看起來沒有太大問題，如果有的話再來解決吧~<br>本來寫好了一個最初的版本之後，放了很久覺得在可讀性上面有很多進步的空間，於是就搞了 ES6 Class 的寫法重寫了一遍，雖然看起來不是最佳解，但我決定先這樣 XD。</p><br><hr><br><h2 id="思路與流程"><a href="#思路與流程" class="headerlink" title="思路與流程"></a>思路與流程</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要分為兩個區塊，分別都是陣列。第一區，目前使用者正在加值的數字，二，暫存的數字與運算符號，也就是最上面公式的區域。<br><br></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="零，監聽按鈕"><a href="#零，監聽按鈕" class="headerlink" title="零，監聽按鈕"></a>零，監聽按鈕</h4><p>當使用者按下按鈕之後，根據按下的按鈕判斷要進行哪一個動作，使用事件代理會比較好，再來是 HTML 用 data 來讓 JS 可以透過 dataset 來取按鈕代表的值，這樣按鈕裡的文字不管替換成甚麼都不會影響到程式了。</p><p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture" target="_blank" rel="external nofollow noopener noreferrer">事件捕獲、事件冒泡 | MDN</a></p><h4 id="一，加值"><a href="#一，加值" class="headerlink" title="一，加值"></a>一，加值</h4><p>當使用者按數字的時候會將按下的數字依序放入代表加值區的陣列，其中包含邏輯的運算，例如小數點是否已經存在、目前陣列可以再加上數字零嗎。當使用者按下運算符號(加減乘除甚至等於)進入下一階段。<br><br></p><ul><li>加值區的陣列裡面每一個值只能是一個數字或是小數點。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">"."</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 上面這樣實際上就是 1234.56</span></span><br></pre></td></tr></table></figure><ul><li>實際寫法會像下面這樣 - 這邊只是示範監聽一個按鈕，實際上使用會用事件代理的方式監聽整個區塊 - function 的地方建議還是要拉出來寫喔~</li></ul><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-key</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"btn-one"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 監聽按鈕被點擊時，觸發存放數字到加值區的 function</span></span><br><span class="line"><span class="keyword">let</span> numbers = [];</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn-one"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> number = e.target.dataset.key;</span><br><span class="line">    numbers = [...numbers, number];</span><br><span class="line">    <span class="comment">// ... 是 es6 的 Spread Syntax，或是要用 push 也行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><h4 id="二，置入公式"><a href="#二，置入公式" class="headerlink" title="二，置入公式"></a>二，置入公式</h4><br><p>當按下加減乘除時，將目前的加值區轉為數字與按下的運算符號分別取出放到同一個物件，再將此陣列存放到公式的陣列，再把加值區的陣列清空。<br>陣列的範例如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formula = [</span><br><span class="line">    &#123;</span><br><span class="line">        number: <span class="number">123.45</span>,</span><br><span class="line">        mark: <span class="string">"division"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        number: <span class="number">0.123</span>,</span><br><span class="line">        mark: <span class="string">"equal"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 上面這樣實際轉換就是 123.45 ÷ 0.123 =</span></span><br></pre></td></tr></table></figure><br><h4 id="三，循環"><a href="#三，循環" class="headerlink" title="三，循環"></a>三，循環</h4><br><p>上面兩個動作不斷的循環，直到按下等於。<br>循環的過程中，加值區會不斷的增加數字、重置，公式的陣列則會一直不斷的推入新的物件，也能藉此記錄步驟。<br><br></p><h4 id="四，輸出結果"><a href="#四，輸出結果" class="headerlink" title="四，輸出結果"></a>四，輸出結果</h4><br>當使用者按下等於時，進到這個步驟之前，一樣會做先步驟二(置入公式)，再將公式的陣列完整取出進行運算，得出結果，清除公式陣列!<br>以上就是整個思考邏輯與流程，其中有許多小細節要小心，必須要多加測試 (所以是有沒有要學寫測試)。另外，更新加值區數字與公式到畫面上，其實就是在按下按鈕來驅動函式的，我想不會有太大問題。<br><hr><br><h2 id="收尾一下"><a href="#收尾一下" class="headerlink" title="收尾一下"></a>收尾一下</h2><p>不細講我的程式了，反正這麼難看不看也罷 XD，前後兩個版本時間相差了半年左右，中間補了不少知識，應該是有進步不少(吧<br>總之這個題目學到了</p><ul><li>物件導向的基礎運用</li><li>一點點點點的 Function Programing</li></ul><br><hr><br><h2 id="最後附上連結，如下"><a href="#最後附上連結，如下" class="headerlink" title="最後附上連結，如下"></a>最後附上連結，如下</h2><ul><li>計算機<ul><li><a href="https://github.com/kevinshu1995/hex_jsDungeon/blob/master/app/assets/js/js003.js" target="_blank" rel="external nofollow noopener noreferrer">Github Source code</a></li><li><a href="https://kevinshu1995.github.io/hex_jsDungeon/jsDun-003.html">Github Page</a></li></ul></li></ul><ul><li>個人連結<ul><li><a href="https://github.com/kevinshu1995" target="_blank" rel="external nofollow noopener noreferrer">Github @kevinHWS</a></li><li><a href="https://kevinshu1995.github.io/hex_jsDungeon/">JS 地下城網站首頁</a><ul><li>歡迎來看看其他的JS作品</li></ul></li></ul></li></ul><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/JSDungeons/">JS地下城</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/HTML/">HTML</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/CSS/">CSS</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JS%E5%9C%B0%E4%B8%8B%E5%9F%8E/">JS地下城</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-003/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gulp-gh-pages deploy 失敗QQ | 程式筆記 - 001</title>
      <link>https://kevinshu1995.github.io/blog/codingnotes/gulp-gh-pages-deploy-failed-QQ-codingnotes-001/</link>
      <guid>https://kevinshu1995.github.io/blog/codingnotes/gulp-gh-pages-deploy-failed-QQ-codingnotes-001/</guid>
      <pubDate>Tue, 08 Dec 2020 14:14:09 GMT</pubDate>
      
      <description>&lt;p&gt;前陣子修改了一下 JS 地下城的網頁時，發現 gulp-gh-pages deploy 時會出現錯誤，紀錄一下&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><p>錯誤如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Error in plugin &#39;gulp-gh-pages&#39;</span><br><span class="line">Message:</span><br><span class="line">    Command failed: git pull</span><br><span class="line">Your configuration specifies to merge with the ref &#39;refs&#x2F;heads&#x2F;gh-pages&#39;</span><br><span class="line">from the remote, but no such ref was fetched.</span><br><span class="line"></span><br><span class="line">Details:</span><br><span class="line">    killed: false</span><br><span class="line">    code: 1</span><br><span class="line">    signal: null</span><br><span class="line">    cmd: git pull</span><br></pre></td></tr></table></figure><p>上網查了一下，找到原因是，gulp-gh-pages 主動將 .publish 資料夾裡的檔案存為暫存，只要把 .publish 資料夾裡的檔案清空就可以重新 deploy 囉。</p><blockquote><p>參考來源: <a href="https://github.com/GovLab/ogrx-2" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/GovLab/ogrx-2</a></p></blockquote><p>簡單寫一下作為紀錄，不然下次又找不到了。<br>頗短的文章，哈哈。</p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/codingnotes/">程式筆記</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E7%A8%8B%E5%BC%8F%E7%AD%86%E8%A8%98/">程式筆記</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/gulp/">gulp</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/codingnotes/gulp-gh-pages-deploy-failed-QQ-codingnotes-001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>俄羅斯方塊謎題 | JS地下城 - 番外篇 - 001</title>
      <link>https://kevinshu1995.github.io/blog/JSDungeons/2020-11-19-JS-Dungeion-side-story-001/</link>
      <guid>https://kevinshu1995.github.io/blog/JSDungeons/2020-11-19-JS-Dungeion-side-story-001/</guid>
      <pubDate>Thu, 19 Nov 2020 15:47:03 GMT</pubDate>
      
      <description>&lt;p&gt;今天在 Line 的社群上面，有位前輩釋出了公司內部的面試題，蠻有趣的就試做了一下，順便參考看看其他前輩都怎麼寫的，收穫良多 R~&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="題目如下。"><a href="#題目如下。" class="headerlink" title="題目如下。"></a>題目如下。</h2><blockquote><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><h2 id="實作俄羅斯方塊的計分系統"><a href="#實作俄羅斯方塊的計分系統" class="headerlink" title="實作俄羅斯方塊的計分系統"></a>實作俄羅斯方塊的計分系統</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>俄羅斯方塊是一款益智遊戲，<br>最初是由蘇聯俄羅斯軟件工程師 Alexey Pajitnov 設計的。</p><h3 id="關於計分制度"><a href="#關於計分制度" class="headerlink" title="關於計分制度"></a>關於計分制度</h3><p>計分公式是基於  <code>當玩家一次清除越多條線，所獲得的分數就會越多</code>  的想法下去設計的。<br>例如，<code>消去一行得 40 分</code>，<code>消去四行得 1200 分</code>。</p><p>且還搭配了一個<code>分數會隨等級倍增</code>的規則。<br>遊戲會<code>從等級 0 開始</code>。<br>當<code>玩家每清除 10 行，等級就會上升</code>。<br>值得注意的是，等級上升之後，消除的總行數是不會重置的。</p></blockquote><a id="more"></a><blockquote><p>關於這個題目，您可以參考此表：</p><table><thead><tr><th>Level</th><th>消去 1 行</th><th>消去 2 行</th><th>消去 3 行</th><th>消去 4 行</th></tr></thead><tbody><tr><td>0</td><td>40</td><td>100</td><td>300</td><td>1200</td></tr><tr><td>1</td><td>80</td><td>200</td><td>600</td><td>2400</td></tr><tr><td>2</td><td>120</td><td>300</td><td>900</td><td>3600</td></tr><tr><td>3</td><td>160</td><td>400</td><td>1200</td><td>4800</td></tr><tr><td>…</td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td>320</td><td>800</td><td>2400</td><td>9600</td></tr><tr><td>…</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><em>你必須透過這張表格得出的公式來以此類推到 level N</em></p><h3 id="任務"><a href="#任務" class="headerlink" title="任務"></a>任務</h3><p>用 Nintendo 的原始計分系統來計算俄羅斯方塊的分數</p><p>type Line = 0 | 1 | 2 | 3 | 4; type getScore = (list: Line[]) =&gt; number;</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>範例：<code>[4, 2, 2, 3, 3, 4, 2]</code><br>隨機長度的 array 且裡面只包含數字  <code>0</code>  到  <code>4</code></p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>計算的最終分數。</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getScore([4, 2, 2, 3, 3, 4, 2]); &#x2F;&#x2F; returns 4900</span><br></pre></td></tr></table></figure><blockquote><ol><li>消去 4 行 +1200 (當前等級<code>0</code>)。分數：<code>0 + 1200 = 1200</code></li><li>消去 2 行 +100。分數：<code>1200 + 100 = 1300</code></li><li>消去 2 行 +100。分數：<code>1300 + 100 = 1400</code></li><li>消去 3 行 +300（當前等級仍為<code>0</code>）。分數：<code>1400 + 300 = 1700</code><br><em>消除的總行數  <code>11</code>=<code>(4 + 2 + 2 + 3)</code>，因此等級上升到<code>1</code>(每消除<code>10</code>行上升一次)</em></li><li>消去 3 行 +600 (當前等級  <code>1</code>)。分數：<code>1700 + 600 = 2300</code></li><li>消去 4 行 +2400。分數：<code>2300 + 2400 = 4700</code></li><li>消去 2 行 +200。分數：<code>4700 + 200 = 4900</code></li></ol><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getScore(list) &#123;</span><br><span class="line"></span><br><span class="line">    return score</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><hr><br><p>看完題目的時候想說感覺蠻簡單的，實作上感覺有些邏輯有點不熟悉，還是花了點時間想了一下。</p><br>## 馬上開始<ol><li><p>觀察分數如何得到<br>觀察一下行數&amp;等級的表格，第 0 級消除 1~4 行後得到的分數是基礎值，接下來依照級數，每一級的分數會是 ( 消除 x 行的基礎分數 _  (級數+1)_ 2)<br>所以這邊得到幾個小結論</p><ol><li>消除第 0 級的 1~4 行分數 =&gt; [40, 100, 300, 1200]</li><li>計算分數的公式會是   ( 消除 x 行的基礎分數 _  (級數+1)_ 2)</li></ol></li><li><p>再來先假設只有傳入一個數字吧，會比較好思考。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只消掉一行</span></span><br><span class="line"><span class="keyword">let</span> lines = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScore</span>(<span class="params">lines</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//消除行數</span></span><br><span class="line">  <span class="keyword">let</span> line = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//基礎分數</span></span><br><span class="line">  <span class="keyword">let</span> basic = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">1200</span>];</span><br><span class="line">  <span class="comment">//級數</span></span><br><span class="line">  <span class="keyword">let</span> level = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 公式</span></span><br><span class="line">  <span class="keyword">return</span> basic[lines - <span class="number">1</span>] * (level + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getScore(lines));</span><br></pre></td></tr></table></figure><p>應該不難。</p></li><li><p>傳入多個參數要怎麼進行?<br>從結果來看，因為要計算總合，這邊就直接聯想到 <code>reduce()</code>，還有一些需要特別注意的細節。</p><ol><li>消除分數會隨著等級提升而提高，但是以新數值傳入前的等級計算</li><li>每一輪等級計算是以還沒加上傳入行數的等級為基礎</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScore</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> score_basic = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">1200</span>];</span><br><span class="line">  <span class="keyword">let</span> level_times = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> level = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> line = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> list.reduce(<span class="function">(<span class="params">acc, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//以累積的行數(line)計算目前等級</span></span><br><span class="line">    level = <span class="built_in">Math</span>.floor(line / <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//計算等級後，讓累績行數加上新增的消除行數 (為下一圈做準備)</span></span><br><span class="line">    line += value;</span><br><span class="line">    <span class="keyword">return</span> acc + score_basic[value - <span class="number">1</span>] * (level + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">getScore([<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>]); <span class="comment">// 4900</span></span><br></pre></td></tr></table></figure></li><li><p>小小檢討一下<br>後來看了一下其他前輩的算法之後發現，在計算等級的地方，我想得有點複雜<br><code>level = Math.floor(line/10)</code><br>這一段其實可以改成<br><code>level = (line- line%10)/10</code><br>就不需要用到 Math 了。</p></li></ol><br><hr><br><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>後來看到丟出這段題目的前輩的解法，沒看過 Functional Programming，直接被嚇到 XDD，程式碼如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// J3小 XDD</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getScore</span>(<span class="params">arr: number[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(</span><br><span class="line">    (&#123; scores, totalLines &#125;, lines) =&gt; (&#123;</span><br><span class="line">      scores:</span><br><span class="line">        scores +</span><br><span class="line">        [<span class="number">0</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">1200</span>][lines] * (<span class="built_in">Math</span>.floor(totalLines / <span class="number">10</span>) + <span class="number">1</span>),</span><br><span class="line">      totalLines: totalLines + lines,</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123; <span class="attr">scores</span>: <span class="number">0</span>, <span class="attr">totalLines</span>: <span class="number">0</span> &#125;</span><br><span class="line">  ).scores;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>慌張的我馬上去查了一下 FP 在幹嘛，學習清單又多一項可以學了 (擦汗..</p><p>PS. 直接跳過傳入資料的驗證 XD</p><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/JSDungeons/">JS地下城</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JS%E5%9C%B0%E4%B8%8B%E5%9F%8E/">JS地下城</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/JSDungeons/2020-11-19-JS-Dungeion-side-story-001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>線下不能群聚? 那線上總可以吧! 200人六角線上前端切版直播課程</title>
      <link>https://kevinshu1995.github.io/blog/learningexp/learning-hexLiveCourse/</link>
      <guid>https://kevinshu1995.github.io/blog/learningexp/learning-hexLiveCourse/</guid>
      <pubDate>Sat, 30 May 2020 11:33:59 GMT</pubDate>
      
      <description>&lt;p&gt;疫情下的多人線上群聚，酒精噴了就上。有點難跟上進度的社畜切版直播課程心路歷程 QQ&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><img src="/blog/learningexp/learning-hexLiveCourse/cover.png" class title="切版班大圖"><br><br><h3 id="切版直播課程-那啥"><a href="#切版直播課程-那啥" class="headerlink" title="切版直播課程? 那啥?"></a>切版直播課程? 那啥?</h3><h4 id="課程簡介-amp-六角學院的狂語-X"><a href="#課程簡介-amp-六角學院的狂語-X" class="headerlink" title="課程簡介 &amp; 六角學院的狂語(X"></a>課程簡介 &amp; 六角學院的狂語(X</h4><p>這是一堂每周兩小時半的前端切版課程，直接來看看六角立下的課程目標。</p><blockquote><p>讓學員在結業時，能夠自豪地說出「自己學會了網頁切版技能」<br>讓學員的網頁切版能力，遠高於平均就業水準<br>具備足夠的知識，能夠依此脈絡研究更進階的排版技巧</p></blockquote><p>隨便抓三大特色</p><ul><li>課程廣度大，新手上完課對前端也會有點輪廓</li><li>學員與老師助教互動多，作業3~5天內就會批改完</li><li>每周都有作業，最終作業有28頁你敢信?</li></ul><a id="more"></a><p>其實還有很多其他的點，但我懶 :)</p><img src="/blog/learningexp/learning-hexLiveCourse/fight.png" class title="Boss 戰況"><ul><li>六角還有創造了BOSS讓大家一起擊潰他，雖然我好像不是很在意XDD</li></ul><br><h4 id="RWD觀念、SASS、gulp都有-老闆是不是瘋了"><a href="#RWD觀念、SASS、gulp都有-老闆是不是瘋了" class="headerlink" title="RWD觀念、SASS、gulp都有!? 老闆是不是瘋了?"></a>RWD觀念、SASS、gulp都有!? 老闆是不是瘋了?</h4><p>課程開始前提供的基礎課程影片，讓完全新手的學員可以相對容易跟上進度，直播課程從基礎講起，盒模型、flexbox、RWD觀念、gulp整合樣板語言、SASS、Bootstrap4、CSS模組化…等。</p><p>課程內容又廣又多，我相信有參與課程的學員應該學到不少，尤其新加入網頁領域的朋友應該已經崩潰了XDD</p><br><h4 id="所以到底是怎麼直播上課"><a href="#所以到底是怎麼直播上課" class="headerlink" title="所以到底是怎麼直播上課?"></a>所以到底是怎麼直播上課?</h4><p>直播班上課是直播切版嗎? 可以斗內嗎?<br>當然不是直播切版，要斗內應該也行吧XD 請直接洽詢六角學院客服</p><p>課程完全都是透過網路直播上課，其實上課方式就跟一般線上課程差不多。<br>最大的問題在於直播平台目前不是很穩定，偶爾會卡卡的，但直播品質個人還是給予90分的評價。</p><p>但是!</p><p>課程還包含</p><ul><li>有Slack群組學員與老師助教討論區，基本上有問必答</li><li>六角自己的作業繳交系統</li><li>更重要的是有一個協作手冊，其中包含老師講義、每周作業攻略、各種補充教材。</li></ul><p>每周都有新的作業，從一頁式的履歷、多頁式網頁、BS做後台、最後還有28頁的大型訂房網版型。<br>每周都有新的東西可以嘗試，加上作業真的很多會做不完，從看到別人的程式碼，與自己的實際操作後，如果沒有進步的話，一定是你太強了，你報名幹嘛???</p><p>六角的用心你如果看不到，是不是瘋了</p><img src="/blog/learningexp/learning-hexLiveCourse/slack.jpeg" class title="Slack"><p><img src="https://i.imgur.com/bY4SdAN.jpg" alt></p><ul><li>課程Slack群組截圖</li></ul><br><br><h3 id="阿這麼多課程，為甚麼要參加這個"><a href="#阿這麼多課程，為甚麼要參加這個" class="headerlink" title="阿這麼多課程，為甚麼要參加這個?"></a>阿這麼多課程，為甚麼要參加這個?</h3><p>我會報名課程最大主因是想精進切版，總覺得有很多可以進步的地方，但又不確定該怎麼進行<br>上完課程之後我認為這堂課最吸引人的是…</p><ul><li><strong>作業超多</strong><br>  認真做的話是很扎實的</li><li><strong>批改速度超快(平均3~5天)</strong><br>  快到懷疑是不是有作業批改工廠</li><li><strong>瘋狂補充的內容</strong><br>  當你以為只是切版課程，實際上卻學了Gulp、模板語言、Github page、CSS模組化、視差滾動</li><li><strong>加碼直播</strong><br>  有為新手提供版型作業和flexbox的示範直播、Gulp教學直播、還有送免費的課程</li><li><strong>200人短時間內跟你一起切版</strong></li><li><strong>學習前端未來的輪廓</strong><br>  因為課程內容廣，所以即使沒有在課程中學得很完整，基本上也大概知道有哪些東西該補齊，後續課程講義也會留著，沒毛病</li></ul><img src="/blog/learningexp/learning-hexLiveCourse/excel.png" class title="Excel"><ul><li>作業繳交的 Excel 表</li></ul><br><h4 id="我不相信，沒有缺點"><a href="#我不相信，沒有缺點" class="headerlink" title="我不相信，沒有缺點?"></a>我不相信，沒有缺點?</h4><p>有，抱怨時間~</p><ul><li>直播會有網路不穩的風險 (沒辦法，線下課程也會有付一樣的錢，但座位可能有差</li><li>老師偶爾幹話(好像不算缺點 XD</li><li>課程作業沒有卯起來做，真的會很浪費錢 (要花很多時間做，不是應該的嗎?笑</li><li>對於完全新手的學員壓力很大，課程非常緊湊。即使有提供課前的基礎教學影片 (超級新手要斟酌一下時間分配</li><li>六角的作業提交網站體驗不佳，剛用時經常找不到目的地 (這跟課程好像沒有直接關係</li><li>老師上課風格習慣重複說明同一個東西來訓練學員 (我不喜歡，覺得浪費時間，我好壞老師不要討厭我</li><li>課程講義、繳交作業平台、各種連結有點分散，初期經常找不到去哪找，一定可以整合得更好</li></ul><p>可是老師真的很用心啦 (趕快補血，我護航大師</p><br><br><h3 id="參加之後是會變多強"><a href="#參加之後是會變多強" class="headerlink" title="參加之後是會變多強?"></a>參加之後是會變多強?</h3><p>我必須老實說，不會因為報名任何課程就會變強，會變強的人本來就會變強，不做作業不思考永遠不會進步。<br>這堂直播課程可以是一個很強的推進器，踩緊油門一定會進步，關鍵還是自己。</p><img src="/blog/learningexp/learning-hexLiveCourse/rank.png" class title="Rank"><ul><li>六角還有幫大家設定職業XD，還統計各組的作業繳交狀況</li></ul><br><h4 id="自從參加了六角直播，現在我是…"><a href="#自從參加了六角直播，現在我是…" class="headerlink" title="自從參加了六角直播，現在我是…?"></a>自從參加了六角直播，現在我是…?</h4><p>以我自己來說，直播課程前，我有上過巨匠前端課程(MD超貴)會寫靜態網頁HTML、CSS、BS框架、jQuery有點基礎，完成六角的SCSS最終作業、JS基礎作業、Git也上完，正在學Vue、JS核心課程。</p><p>本來是抱著進來寫作業練習切版的心態，順便補一些知識，不過實際學了比我想得更多。<br>以下是我課程結束後的收獲們。</p><ul><li>剛好在公司學習MVC時，六角就丟了Gulp讓我對npm、前端打包更有概念</li><li>本來對BS改SCSS檔很不理解，現在也能知道為甚麼要改，改了之後有多方便</li><li>看到很多學員很認真，也讓我在切板時更有動力</li></ul><p>很開心可以參加到這堂課，本來自己也很不確定到底要不要花這筆錢報名，所幸最後真的學了很多我沒想到的，而且還送課程，六角是慈善機構嗎?</p><img src="/blog/learningexp/learning-hexLiveCourse/homework.jpg" class title="Homework"><ul><li>第五周的後台系統切版，Bootstrap實作</li></ul><br><br><h3 id="所以值得參加嗎"><a href="#所以值得參加嗎" class="headerlink" title="所以值得參加嗎?"></a>所以值得參加嗎?</h3><p>我會說值得，前提是每周至少要花5~20小時不等的時間切版，要稍微有基礎或是有很多時間才會跟得上，不然作業都交不完成就感應該很低。<br>如果很忙又很懶，我會建議還是上一般線上影音課程就好，不會太緊湊。</p><p><em>總結: 六角超讚</em></p><br><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/learningexp/">學習經歷</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E5%85%AD%E8%A7%92/">六角</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92/">前端學習</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/learningexp/learning-hexLiveCourse/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS、JS切個時鐘吧 | JS地下城 - 002</title>
      <link>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-002/</link>
      <guid>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-002/</guid>
      <pubDate>Wed, 04 Mar 2020 11:56:49 GMT</pubDate>
      
      <description>&lt;p&gt;這次的目標是時鐘，這次的挑戰其實比較麻煩的是刻 CSS (XD，JS的部分反而一下就完成了，相信大家應該也覺得這關不會太難。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><style> .gist tbody tr:nth-of-type(odd){background: none} </style><p>馬上又來了第二篇的 JS 地下城文章，這次的目標是時鐘。</p><p>一看到介面全部使用 <strong>CSS 手寫繪製</strong>，整個就嚇傻了，感覺很複雜要花很多時間切，本來有點想偷懶直接貼圖上去，後來上網查了一下別人都怎麼做的時候，突然發現好像也不會太難，於是就毅然決然地切了QQ。</p><p>搞了半天 CSS 花超多時間，我以為我是在練習 JS 。 XDDD</p><br><p>好啦！不要廢話了，來看看這次的目標吧。</p><br><blockquote><ul><li><font color="#aaa">BOSS 弱點</font></li></ul><p>–<font color="#aaa">【特定技術】需使用 JS 原生語法的 getDate() 撈取時間，不可用套件</font><br>–<font color="#aaa">【特定技術】需使用 JS 原生語法的 setTimeout() 或 setInterval()，持續讓秒針、分針、時針能夠以台北時區移動</font><br>–<font color="#aaa">【特定技術】介面請全部用 CSS2、CSS3 手寫繪製，什麼…？你說太強人所難？？那..用圖片也不是不行辣， 點選一下元素，右側控制列會有個藍色按鈕，點選 [下載] 即可。</font></p><ul><li><font color="#aaa">UI設計稿</font></li></ul></blockquote><img src="/blog/JSDungeons/JS-Dungeon-002/cover.png" class title="UI設計稿"><a id="more"></a><h2 id="第一步，切-CSS"><a href="#第一步，切-CSS" class="headerlink" title="第一步，切 CSS"></a>第一步，切 CSS</h2><p>這部分我真的花很多時間思考，不過事實上並不難，只需要花時間一步一步邊做邊思考。</p><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>這邊就沒啥好說的，就把基礎的畫面切出來，沒甚麼問題就往後面看吧。</p><p>HTML</p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-01.html"></script><p>SCSS</p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-01.scss"></script><img src="/blog/JSDungeons/JS-Dungeon-002/process-1.png" class title="Step 1"><h3 id="2-裝飾線、點"><a href="#2-裝飾線、點" class="headerlink" title="2. 裝飾線、點"></a>2. 裝飾線、點</h3><p>這邊程式碼有點長，說明一下我的作法。</p><p>三十個元素，每一個元素都跟父元素同寬，設定裝飾線的高度，再用偽元素做兩邊的裝飾線、點，最後整個元素依照位置旋轉，每分鐘轉6度。</p><p><code>.hour0</code>重複三十次再帶入HTML就好囉 QQ ，好啦其實可以用 SASS 的迴圈拉。</p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-02.scss"></script><p><em>順帶一提這邊我發現六角提供的設計稿是每小時中間有五個點，但是我想要讓每一格都是一秒或一分鐘，因此我把它修改成四個點。</em></p><p>如下圖。</p><img src="/blog/JSDungeons/JS-Dungeon-002/process-2.png" class title="Step 2"><p>這邊完整的程式碼有點太長了，所以請移駕 <a href="https://codepen.io/kevinshu/pen/XWbjvOg" target="_blank" rel="external nofollow noopener noreferrer">codepen</a> 。</p><h3 id="3-時鐘上的字"><a href="#3-時鐘上的字" class="headerlink" title="3. 時鐘上的字"></a>3. 時鐘上的字</h3><p>調整文字的旋轉作法其實跟裝飾線差不多，只不過父元素轉過去之後，字還要再<strong>旋轉</strong>回來，看起來才會是正的。</p><p>這邊就直接看程式碼吧，一樣可以用迴圈 ~</p><p>順便附上 <a href="https://codepen.io/kevinshu/pen/LYVbyYr" target="_blank" rel="external nofollow noopener noreferrer">codepen</a> </p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-03.scss"></script><h3 id="4-最後是指針"><a href="#4-最後是指針" class="headerlink" title="4. 最後是指針"></a>4. 最後是指針</h3><p>直接送上 <a href="https://codepen.io/kevinshu/pen/RwPojOg" target="_blank" rel="external nofollow noopener noreferrer">codepen</a> 程式碼。</p><p>這邊的程式碼很長，直接過去看吧 XD ，需要注意的部分是這邊要測試一下<strong>旋轉時 12 點為 0 度</strong>，會比較好判斷，並且<strong>使旋轉的軸心在中間</strong>，這樣用 JS 控制時會比較輕鬆。</p><p>完成 ! </p><img src="/blog/JSDungeons/JS-Dungeon-002/process-3.png" class title="Step 3"><p>等等，是不是忘了 JS 。</p><h2 id="進入-JS-控制指針拉"><a href="#進入-JS-控制指針拉" class="headerlink" title="進入 JS 控制指針拉"></a>進入 JS 控制指針拉</h2><h2 id="抓取時間"><a href="#抓取時間" class="headerlink" title="抓取時間"></a>抓取時間</h2><p>這邊要使用的是 <code>new Date()</code>，直接在開發人員工具測試時會發現它會直接抓取現在的時間。<br>可以參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external nofollow noopener noreferrer">MDN</a> 的說明。</p><p>只要宣告一個變數之後，可以透過<code>getHours()</code>取得小時、<code>getMinutes()</code>取得分鐘、<code>getSeconds()</code>取得秒數。</p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-01.js"></script><p>其他屬性可以前往 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date#JavaScript_Date_%E7%89%A9%E4%BB%B6%E5%AF%A6%E9%AB%94" target="_blank" rel="external nofollow noopener noreferrer">MDN</a> 看看~</p><h2 id="抓取指針角度"><a href="#抓取指針角度" class="headerlink" title="抓取指針角度"></a>抓取指針角度</h2><p>既然已經抓取好時間，接下來試試看怎麼樣可以輸入參數來控制指針角度吧！<br>從<strong>秒針</strong>開始做會比較好思考，因為會根據現在的秒數直接指在指定的秒數，不像是時針、分針會根據秒數與分鐘數多轉一點點。</p><h3 id="1-秒針"><a href="#1-秒針" class="headerlink" title="1. 秒針"></a>1. 秒針</h3><p>以下是我在腦內的思考流程XD</p><blockquote><p>假設現在是 0 秒的話，很明顯就是轉 0 度，如果是 10 秒的話要轉幾度呢?<br>轉一圈是 360 度、 60 秒，因此一秒會轉 360/60 = 6 度。<br>所以 <strong>10 秒 就是 10 * 6(每秒轉動6度) = 60 度</strong></p><p><em>P.S. 這邊預設角度 0 度時指針是指向 12 點。</em></p></blockquote><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-02.js"></script><h3 id="2-分針"><a href="#2-分針" class="headerlink" title="2. 分針"></a>2. 分針</h3><p>先看看程式碼吧！</p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-03.js"></script><blockquote><p>一樣是每分鐘會轉 6 度，但是！<br>在一分鐘內，分針會慢慢地轉到下一個 6 度。</p><p>所以要計算現在分鐘數所轉的角度加上每秒會增加的角度。</p><p>每秒會增加的角度 -&gt;<br>每 60 秒秒針會轉 6 度，每 10 秒轉 1 度。</p><p>因此最後算式是 ( 現在分鐘數 ) * 6 + ( 現在秒數 ) / 10，就是現在的角度啦！</p></blockquote><h3 id="3-時針"><a href="#3-時針" class="headerlink" title="3. 時針"></a>3. 時針</h3><p>其實這邊的就跟分針一樣的作法，只不過可以多一個判斷如果超過 12 點可以扣掉 12 ( 但後來想想其實沒有也沒差 )。</p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-04.js"></script><h3 id="4-最後的最後"><a href="#4-最後的最後" class="headerlink" title="4. 最後的最後"></a>4. 最後的最後</h3><p>接下來要使用的是如何讓 JS 一直去抓取現在的時間並且控制指針的角度，就要用到下面的語法。</p><p><code>setInterval()</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setInterval" target="_blank" rel="external nofollow noopener noreferrer">MDN傳送門</a><br>固定延遲了某段時間之後，才去執行對應的程式碼，然後「不斷循環」。</p><p><em>P.S. 完整語法是<code>window.setInterval</code></em></p><p>把程式全部整合起來吧~</p><script src="https://gist.github.com/kevinshu1995/de26bfce5c11fa4b7214cd76f920fbd9.js?file=clock-05.js"></script><h2 id="搭啦-完成"><a href="#搭啦-完成" class="headerlink" title="搭啦 ~ 完成"></a>搭啦 ~ 完成</h2><p><a href="https://kevinshu1995.github.io/hex-js-002-clock/">Github page</a> 請放大一點看，文字才不會跑版 QQ</p><p class="codepen" data-height="500" data-theme-id="default" data-default-tab="js,result" data-user="kevinshu" data-slug-hash="OJVRNRM" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="時鐘-Clock - JS 地下城">  <span>See the Pen <a href="https://codepen.io/kevinshu/pen/OJVRNRM" target="_blank" rel="external nofollow noopener noreferrer">  時鐘-Clock - JS 地下城</a> by kevinshu (<a href="https://codepen.io/kevinshu" target="_blank" rel="external nofollow noopener noreferrer">@kevinshu</a>)  on <a href="https://codepen.io" target="_blank" rel="external nofollow noopener noreferrer">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h6 id="tags-JS-Web-SASS-CSS"><a href="#tags-JS-Web-SASS-CSS" class="headerlink" title="tags: JS Web SASS CSS"></a>tags: <code>JS</code> <code>Web</code> <code>SASS</code> <code>CSS</code></h6>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/JSDungeons/">JS地下城</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/HTML/">HTML</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/CSS/">CSS</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JS%E5%9C%B0%E4%B8%8B%E5%9F%8E/">JS地下城</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-002/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>用 JavaScript 切出九九乘法表 | JS地下城 - 001</title>
      <link>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-001/</link>
      <guid>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-001/</guid>
      <pubDate>Wed, 19 Feb 2020 11:47:44 GMT</pubDate>
      
      <description>&lt;p&gt;第一篇技術文章就交給 JS 地下城了，六角學院出的 JS 地下城真讚，根據現成的設計稿與指定的技術來練習，之後就先以地下城作為主軸來寫文章吧。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><br><blockquote><ul><li><p><font color="#aaa">BOSS 弱點</font><br><font color="#aaa">【特定技術】需使用 JS for 迴圈技巧，裡頭數字不能直接寫在 HTML 上，需使用 JS 印出。</font><br><font color="#aaa">需使用 HTML、CSS、JS 技術</font><br><font color="#aaa">介面需與設計稿一致</font></p></li><li><p><font color="#aaa">UI設計稿</font></p><img src="/blog/JSDungeons/JS-Dungeon-001/cover.png" class title="UI設計稿"></li></ul></blockquote><a id="more"></a><br><h2 id="第一步-HTML架構"><a href="#第一步-HTML架構" class="headerlink" title="第一步 - HTML架構"></a>第一步 - HTML架構</h2><p>不囉嗦，先寫出一格的架構，順便補上左上角那格，後面幾格之後用 JS 產生就好，目前先著重在架構跟樣式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"wrap"</span> <span class="attr">id</span>=<span class="string">"mainList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"l-card-title"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>九九乘法表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>MULTIPLICATION CHART<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"l-card"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"l-card__wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"l-card__wrap__title"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x1=2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x2=4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x3=6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x4=8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x5=10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x6=12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x7=14<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x8=16<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2x9=18<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="第二步-主要架構-CSS切法"><a href="#第二步-主要架構-CSS切法" class="headerlink" title="第二步 - 主要架構 CSS切法"></a>第二步 - 主要架構 CSS切法</h2><p>主要的版面用 float, flexbox, grid 都能切出來，以要忠實呈現 UI 設計稿的方便性來排序是 grid &gt; flex &gt; float ，不過切這個之前剛好正學了格線系統，所以最後我還是用了格線系統。</p><p>不過我還是雞婆地列出三種方式的作法，哈哈。</p><br><ul><li>float - 最古老最繁瑣的東西<br>float 需要特別注意的地方，因為需要左右對齊，所以結構上中間需要再加上一層來設定左右的 margin。</li></ul><p>這邊參考了鐵人賽文章 <a href="https://ithelp.ithome.com.tw/articles/10159610" target="_blank" rel="external nofollow noopener noreferrer">float參考資料</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1140px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">32px</span> auto;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &gt;<span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">366px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">40px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.row</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>grid - 格線系統做RWD比較多要設定<br>橫排的寬直接設定好寬度，讓每一格都不會超出畫面就可以。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> medium &#123;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">1110px</span>) &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> sm &#123;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">730px</span>) &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#F0F0F0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1110px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">32px</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span> , <span class="number">350px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span> , <span class="number">366px</span>);</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">40px</span> <span class="number">30px</span>;</span><br><span class="line">  @include medium&#123;</span><br><span class="line">    <span class="selector-tag">max-width</span>: 730<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(2 , 350<span class="selector-tag">px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@include</span> sm&#123;</span><br><span class="line">    <span class="selector-tag">max-width</span>: 350<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(1 , 350<span class="selector-tag">px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>flex - 最方便的那種~</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1140px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">32px</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &gt;<span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">366px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="第三步-補上各種-CSS-細節"><a href="#第三步-補上各種-CSS-細節" class="headerlink" title="第三步 - 補上各種 CSS 細節"></a>第三步 - 補上各種 CSS 細節</h2><p>這邊就沒啥特別的，所以可以直接跳過XD。<br>提一下內層的排版是用flex排，應該是比較方便的。</p><br><h2 id="第四步-進入-JS-的世界囉"><a href="#第四步-進入-JS-的世界囉" class="headerlink" title="第四步 - 進入 JS 的世界囉 !"></a>第四步 - 進入 JS 的世界囉 !</h2><p>首先，我卡住了，哈哈哈。所以分個步驟來寫吧。</p><p>P.S. 以下為思考流程，實際寫的時候我是邊寫邊調整的。</p><br><h3 id="1-觀察畫面，把他切成多個部分來分別做，才不會把自己搞亂。"><a href="#1-觀察畫面，把他切成多個部分來分別做，才不會把自己搞亂。" class="headerlink" title="1. 觀察畫面，把他切成多個部分來分別做，才不會把自己搞亂。"></a>1. 觀察畫面，把他切成<strong>多個部分</strong>來分別做，才不會把自己搞亂。</h3><img src="/blog/JSDungeons/JS-Dungeon-001/js-step-1.png" class title="思考流程 - 1"><ul><li><p>第一部分。觀察每一個區塊都有一個巨大的數字 2~9，為乘數。<br>這邊可想而知，可以用 for 迴圈來跑。</p></li><li><p>第二部分。每一個區塊裡面的小數字們，都是乘數乘上 1 - 9。<br>是不是就可以用每個區塊所取到的乘數跑 for 迴圈乘上 1 - 9。</p></li><li><p>區分好兩個部分之後，就依序來寫吧。</p></li></ul><br><h3 id="2-建立第一區塊的迴圈"><a href="#2-建立第一區塊的迴圈" class="headerlink" title="2. 建立第一區塊的迴圈"></a>2. 建立第一區塊的迴圈</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mainList = <span class="built_in">document</span>.getElementById(<span class="string">'mainList'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//標題區塊先存進 strOut </span></span><br><span class="line"><span class="keyword">let</span> strOut = <span class="string">`&lt;li class="l-card-title"&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;九九乘法表&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;MULTIPLICATION CHART&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;`</span></span><br><span class="line">        <span class="comment">//跑for迴圈</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">strOut += <span class="string">`&lt;li class="l-card"&gt;</span></span><br><span class="line"><span class="string">     &lt;ul class="l-card__wrap"&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="l-card__title"&gt;<span class="subst">$&#123;i + <span class="number">2</span>&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//最後再用innerHTML來插入HTML標籤</span></span><br><span class="line">mainList.innerHTML = strOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>結果 -&gt;</li></ul><img src="/blog/JSDungeons/JS-Dungeon-001/js-step-2.png" class title="思考流程 - 2"><br><h3 id="3-建立內部數字迴圈"><a href="#3-建立內部數字迴圈" class="headerlink" title="3. 建立內部數字迴圈"></a>3. 建立內部數字迴圈</h3><p>這邊建立數字迴圈需要注意的是，因為最後要帶入上面的函式裡面，所以需要在這個函式裡面放參數帶入該欄位的乘數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strInner = <span class="string">''</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerList</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">strInner += <span class="string">`&lt;li&gt; <span class="subst">$&#123;num&#125;</span> x <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span> = <span class="subst">$&#123;num * (i + <span class="number">1</span>)&#125;</span> &lt;/li&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑跑看結果，看起來無誤</p><img src="/blog/JSDungeons/JS-Dungeon-001/js-step-3.png" class title="思考流程 - 3 - 建立內部數字迴圈"><br><h3 id="4-最終的組合"><a href="#4-最終的組合" class="headerlink" title="4. 最終的組合"></a>4. 最終的組合</h3><p>這邊需要注意第20行的<code>strInner =&#39;&#39;;</code>，如果沒有加上的話，每一欄都會加上上一欄的式子，所以需要清除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mainList = <span class="built_in">document</span>.getElementById(<span class="string">'mainList'</span>);</span><br><span class="line"><span class="keyword">let</span> chartNum = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">let</span> strInner = <span class="string">''</span>;</span><br><span class="line">updateList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//title</span></span><br><span class="line"><span class="keyword">let</span> strOut = <span class="string">`&lt;li class="l-card-title"&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;九九乘法表&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;MULTIPLICATION CHART&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;`</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; chartNum; i++) &#123;</span><br><span class="line">innerList(i + <span class="number">2</span>)</span><br><span class="line">strOut += <span class="string">`&lt;li class="l-card"&gt;</span></span><br><span class="line"><span class="string">     &lt;ul class="l-card__wrap"&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="l-card__title"&gt;<span class="subst">$&#123;i + <span class="number">2</span>&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;strInner&#125;</span></span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span></span><br><span class="line">strInner = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">mainList.innerHTML = strOut;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerList</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">strInner += <span class="string">`&lt;li&gt;<span class="subst">$&#123;num&#125;</span>x<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>=<span class="subst">$&#123;num * (i + <span class="number">1</span>)&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="完成"><a href="#完成" class="headerlink" title="完成 !"></a>完成 !</h2><p><a href="https://kevinshu1995.github.io/hex-js-001-multiplication-chart/">Github-page 連結</a></p><p class="codepen" data-height="500" data-theme-id="dark" data-default-tab="js,result" data-user="kevinshu" data-slug-hash="WNvwVpQ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="九九乘法表  Multiplication chart - JS 地下城">  <span>See the Pen <a href="https://codepen.io/kevinshu/pen/WNvwVpQ" target="_blank" rel="external nofollow noopener noreferrer">  九九乘法表  Multiplication chart - JS 地下城</a> by kevinshu (<a href="https://codepen.io/kevinshu" target="_blank" rel="external nofollow noopener noreferrer">@kevinshu</a>)  on <a href="https://codepen.io" target="_blank" rel="external nofollow noopener noreferrer">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h6 id="tags-JS-Web-tutorials-SASS-CSS"><a href="#tags-JS-Web-tutorials-SASS-CSS" class="headerlink" title="tags: JS Web tutorials SASS CSS"></a>tags: <code>JS</code> <code>Web</code> <code>tutorials</code> <code>SASS</code> <code>CSS</code></h6>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/JSDungeons/">JS地下城</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/HTML/">HTML</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/CSS/">CSS</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/JS%E5%9C%B0%E4%B8%8B%E5%9F%8E/">JS地下城</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/JSDungeons/JS-Dungeon-001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>《1917》最佳影片與導演獎熱門首選 | 電影雜談</title>
      <link>https://kevinshu1995.github.io/blog/casualtalk/movies-1917/</link>
      <guid>https://kevinshu1995.github.io/blog/casualtalk/movies-1917/</guid>
      <pubDate>Wed, 19 Feb 2020 11:32:18 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;一鏡到底的戰爭片!?我還不看爆&lt;/strong&gt;。本年度最愛的電影!!!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><img src="/blog/casualtalk/movies-1917/cover.jpg" class title="Photo Credit: IMDb" alt="1917 cover"><h2 id="一鏡到底的戰爭片-我還不看爆"><a href="#一鏡到底的戰爭片-我還不看爆" class="headerlink" title="一鏡到底的戰爭片!?我還不看爆"></a>一鏡到底的戰爭片!?我還不看爆</h2><p>某天看到有個 Youtuber 介紹這部電影，一聽到<strong>一鏡到底</strong>就想立刻衝到電影院。不過懶癌末期導致延後了一段時間。</p><p>抱持高度期待的心態進電影院的我，因為習慣保留驚喜感，所以一如往常的略過各種預告與影評，老實說這部電影的背景故事、卡司、製作…等等，我完全不在意，我只在意一件事情。</p><p>導演會怎麼以一鏡到底詮釋戰爭片。對！我就是這麼膚淺。</p><p>《1917》在我心中的分數非常高，沒意外的話會是今年最愛的電影<br>( 欸！今年才剛開始欸XD</p><br><a id="more"></a><p>以下有雷</p><br><br><h2 id="戰爭底下小人物的大故事"><a href="#戰爭底下小人物的大故事" class="headerlink" title="戰爭底下小人物的大故事"></a>戰爭底下小人物的大故事</h2><img src="/blog/casualtalk/movies-1917/movie-1917-photo-1.jpg" class title="Photo Credit: IMDb" alt="1917"><p>故事發生在1917年春季的法國北部，同盟國與協約國在西線的僵局下發生的故事，東方戰線因為俄國退出戰爭而結束，德軍集中於西線，意圖在美軍到達歐洲之前，於1918年夏季打敗英法兩國，經歷3-7月之間的五次大規模攻勢，而損失15個師後，軍力消耗殆盡，撤退至興登堡防線。</p><p>德國撤軍是一項戰略決策，他們正在鞏固部隊，為可能的進攻行動做準備。而電影聚焦在英國人對於德國人撤退的困惑，如果敵人正在逃跑，趁勝追擊就能一舉得勝，但如果是他們設下的埋伏呢?</p><p>德國撤軍的準備工作都是在黑夜的掩護下進行，這讓協約國不能充分掌握敵人的計畫，在充滿不確定的情況下，造就了這部電影的背景故事。</p><br><p><em>這歷史我也是查的蠻久的，我歷史真的很爛。</em></p><br><blockquote><p><em>This is a dangerous assignment. There may be no return</em></p><blockquote><p><em>這是個危險且沒有回報的任務</em></p></blockquote></blockquote><br><br><p>這部電影背後的故事來自導演 Sam Mendes 爺爺在第一次世界大戰經歷的真實故事改編而成。</p><p>Alfred Mendes(導演爺爺) 因為個頭矮小被挑選為西線戰場的信差兵，必須在盟軍不同崗位間傳遞訊息。他卻能自願接下沒有任何回報甚至犧牲生命的任務，穿過戰場中危險的無人區，在散佈數英里的範圍內的積水火山口之中找出仍然倖存的同袍們。</p><p>雖然實際上電影劇情是被指派在時間內傳達重要情報，阻止1600名友軍落入圈套，沒有這麼偉大而且有些許令人疑惑之處，但是有多少人能做到這麼豁達，出任一個可能犧牲自己又沒有回報的任務呢?</p><img src="/blog/casualtalk/movies-1917/movie-1917-photo-2.jpg" class title="Alfred Mendes received a military commendation for his actions at the Battle of Poelcappelle. (Public domain&#x2F;fair use)" alt="1917"><p>-Alfred Mendes(導演爺爺)</p><p>Alfred 還提到許多有趣的故事，可以點<a href="https://www.thesun.co.uk/tvandshowbiz/9701981/sam-mendes-1917-cumberbatch-grandad/" target="_blank" rel="external nofollow noopener noreferrer">這裡</a>去看看</p><br><br><h2 id="心得與評價"><a href="#心得與評價" class="headerlink" title="心得與評價"></a>心得與評價</h2><img src="/blog/casualtalk/movies-1917/movie-1917-photo-3.jpg" class title="Photo Credit: IMDb" alt="1917"><p><strong>樸實的劇情，美到令人屏息的鏡位，足以讓人深陷其中。</strong></p><p>雖然劇情我沒這麼喜歡，但是長鏡頭視角下的唯美又細膩的畫面，許多令人當下無法理解的鏡位，完全能夠讓人全神感受。<br>這是我目前為止唯一在電影院裡不斷的在內心驚呼的電影。</p><br><br><blockquote><p><em>入圍了10項奧斯卡，幾乎囊括所有技術類獎項，更在獲得美國製片公會及導演公會的肯定後，成為最佳影片與導演獎的熱門首選。</em></p></blockquote><br><br><p>入圍10項奧斯卡候選榜單的《1917》，我相信會在我心中佔據一席之地好一段時間。</p><p><em>PS.原來是攝影大師 Roger Deakins，我是不是該去看《銀翼殺手2020》</em></p><p><em>PPS.第一次寫文章就獻給1917了</em></p><br><br><p><em>本文章若有任何資訊誤植或侵權，煩請告知，我會立刻處理。</em></p><br><p>–<em>參考文章</em><br>– <a href="https://www.smithsonianmag.com/history/true-history-behind-1917-movie-180973800/" target="_blank" rel="external nofollow noopener noreferrer">THE TRUE HISTORY BEHIND THE ‘1917’ MOVIE</a><br>– <a href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%98" target="_blank" rel="external nofollow noopener noreferrer">維基百科-第一次世界大戰</a><br>– <a href="https://www.thenewslens.com/article/130644" target="_blank" rel="external nofollow noopener noreferrer">《1917》：巧奪天工的技術水準，驚心動魄的戰場求生記</a><br>– <a href="https://www.imdb.com/title/tt8579674/mediaindex?ref_=tt_pv_mi_sm" target="_blank" rel="external nofollow noopener noreferrer">IMDb - 1917</a><br>– <a href="https://www.thesun.co.uk/tvandshowbiz/9701981/sam-mendes-1917-cumberbatch-grandad/" target="_blank" rel="external nofollow noopener noreferrer">PASSIONDALE Hunted by snipers and wartime romps: how director Sam Mendes’ hero grandad inspired WWI hit 1917</a></p>]]></content:encoded>
      
      
      <category domain="https://kevinshu1995.github.io/blog/categories/casualtalk/">生活亂談</category>
      
      
      <category domain="https://kevinshu1995.github.io/blog/tags/Movie/">Movie</category>
      
      <category domain="https://kevinshu1995.github.io/blog/tags/Life/">Life</category>
      
      
      <comments>https://kevinshu1995.github.io/blog/casualtalk/movies-1917/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
